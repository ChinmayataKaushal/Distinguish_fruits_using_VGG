# -*- coding: utf-8 -*-
"""Fruits-360.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dHO7DTg5CayedChXpyO8_PxwKaDrk2OX
"""

#install kaggle
pip install kaggle

# Download kaggle.json and upload on colab
from google.colab import files

files.upload()

## make a directory and copy the file into it
! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
#file permission
! chmod 600 ~/.kaggle/kaggle.json
#list to check if everything is installed properly
! kaggle datasets list

!kaggle datasets download -d moltean/fruits

#make a new directory and unzip the above file in it
! mkdir MODEL

!unzip fruits.zip -d MODEL/

#Write code and make the model

## IMPORT ALL LIBRARIES
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from keras.layers import Input, Lambda, Dense, Flatten, Dropout
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix, classification_report
from glob import glob

## RESIZE IMAGES
IMAGE_SIZE = [32, 32] 

## TRAINING PARAMETERS
epochs = 1
batch_size = 32

## SPECIFY PATHS
train_path = '/content/MODEL/fruits-360/Training'
valid_path = '/content/MODEL/fruits-360/Test'

## GET THE NUMBER OF FILES
image_files = glob(train_path + '/*/*.jp*g')
valid_image_files = glob(valid_path + '/*/*.jp*g')

## GET NUMBER OF CLASSES
folders = glob(train_path + '/*')

## PRE-PROCESS
vgg = VGG16(input_shape = (32,32,3), weights='imagenet', include_top=False)

## NEED TO CHANGE EXISTING WEIGHTS
for layer in vgg.layers:
  layer.trainable = False

## ADD CUSTOM LAYER AFTER VGG
x = Flatten()(vgg.output)
x = Dense(1500, activation='relu')(x)
prediction = Dense(len(folders), activation='softmax')(x)

## CREATE MODEL OBJECT
model = Model(inputs=vgg.input, outputs=prediction)

## TO VIEW STRUCTURE OF MODEL
model.summary()

## SET COST AND OPTIMIZATION MODELS
model.compile(
  loss='categorical_crossentropy',
  optimizer='rmsprop',
  metrics=['accuracy']
)

## CREATE ImageDataGenerator
gen = ImageDataGenerator(
  rotation_range=20,
  width_shift_range=0.1,
  height_shift_range=0.1,
  shear_range=0.1,
  zoom_range=0.2,
  horizontal_flip=True,
  vertical_flip=True,
  preprocessing_function=preprocess_input
)

## LABELS
testgen = gen.flow_from_directory(valid_path, target_size=IMAGE_SIZE)
print(testgen.class_indices)
labels = [None] * len(testgen.class_indices)
for k, v in testgen.class_indices.items():
  labels[v] = k

## VGG MAPS ARE 'BGR' 
for x, y in testgen:
  plt.title(labels[np.argmax(y[0])])
  plt.imshow(x[0])
  plt.show()
  break

## CREATE GENERATORS
train_generator = gen.flow_from_directory(
  train_path,
  target_size=IMAGE_SIZE,
  shuffle=True,
  batch_size=32,
)

valid_generator = gen.flow_from_directory(
  valid_path,
  target_size=IMAGE_SIZE,
  shuffle=True,
  batch_size=32,
)

## NOW FIT THE MODEL

r = model.fit_generator(
  train_generator,
  validation_data=valid_generator,
  epochs=epochs,
  steps_per_epoch=len(image_files),
  validation_steps=len(valid_image_files)
)

## CONFUSION MATRIX
def get_confusion_matrix(data_path, N):
  predictions = []
  targets = []

  for x, y in gen.flow_from_directory(data_path, target_size=IMAGE_SIZE, shuffle=False, batch_size=batch_size * 2):
    p = model.predict(x)
    p = np.argmax(p, axis=1)
    y = np.argmax(y, axis=1)
    predictions = np.concatenate((predictions, p))
    targets = np.concatenate((targets, y))
    if len(targets) >= N:
      break
  cm = confusion_matrix(targets, predictions)
  return predictions, targets, cm

predictions = []
targets = []

predictions, targets, cm = get_confusion_matrix(train_path, len(image_files))
print(cm)
valid_cm = get_confusion_matrix(valid_path, len(valid_image_files))
print(valid_cm)

"""## PLOT GRAPHS

#LOSS
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()

#ACCURACY
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
"""

## CLASSIFICATION REPORT
print(classification_report(predictions, targets))

## SAVE THE MODEL
model.save('fruits365-92%-VGG.h5')

